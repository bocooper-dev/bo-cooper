[{"data":1,"prerenderedAt":187},["ShallowReactive",2],{"navigation":3,"/blog/ai-meta-prompting-hop-lop":42,"/blog/ai-meta-prompting-hop-lop-surround":183},[4],{"title":5,"path":6,"stem":7,"children":8,"page":41},"Blog","/blog","blog",[9,13,17,21,25,29,33,37],{"title":10,"path":11,"stem":12},"AI Meta-Prompting with HOP & LOP","/blog/ai-meta-prompting-hop-lop","blog/ai-meta-prompting-hop-lop",{"title":14,"path":15,"stem":16},"CSS-Only Active States in a Nuxt Blog Carousel (Tailwind + :has + Arbitrary Variants)","/blog/css-only-carousel-active-states","blog/css-only-carousel-active-states",{"title":18,"path":19,"stem":20},"Improving DX with Custom Dev Components","/blog/dx-custom-dev-components","blog/dx-custom-dev-components",{"title":22,"path":23,"stem":24},"Generative Abstract Shape Gradient Blur Background (Nuxt + Vue Clip-Path)","/blog/generative-gradient-shapes","blog/generative-gradient-shapes",{"title":26,"path":27,"stem":28},"Interactive SVG Game Boy Component (Vue + Filters + Parallax)","/blog/interactive-svg-gameboy","blog/interactive-svg-gameboy",{"title":30,"path":31,"stem":32},"Modern Motion in Nuxt with Motion.js","/blog/motion-js-nuxt-animations","blog/motion-js-nuxt-animations",{"title":34,"path":35,"stem":36},"Reusable Spotlight Effect Directive for Nuxt","/blog/nuxt-spotlight-directive","blog/nuxt-spotlight-directive",{"title":38,"path":39,"stem":40},"Scroll-Driven SVG Path Animations","/blog/scroll-driven-svg-path-animations","blog/scroll-driven-svg-path-animations",false,{"id":43,"title":10,"author":44,"body":48,"date":175,"description":176,"extension":177,"image":178,"meta":179,"minRead":180,"navigation":121,"path":11,"seo":181,"stem":12,"__hash__":182},"blog/blog/ai-meta-prompting-hop-lop.md",{"name":45,"avatar":46},"Bo Cooper",{"src":47,"alt":45},"/images/bo-cooper-branding-2.png",{"type":49,"value":50,"toc":168},"minimark",[51,55,60,70,74,135,139,142,146,157,161,164],[52,53,54],"p",{},"Most prompt chains collapse because context is unstructured. Separating meta instructions (HOP) from tactical directives (LOP) creates durable, debuggable flows.",[56,57,59],"h2",{"id":58},"model","Model",[61,62,63,67],"ul",{},[64,65,66],"li",{},"HOP: Governing constraints & roles (non-ephemeral)",[64,68,69],{},"LOP: Task-specific payload (ephemeral)",[56,71,73],{"id":72},"template-example","Template Example",[75,76,81],"pre",{"className":77,"code":78,"language":79,"meta":80,"style":80},"language-txt shiki shiki-themes material-theme-lighter material-theme material-theme-palenight","[HOP]\nRole: Senior Vue/Nuxt Engineer AI\nGoals: Generate concise component scaffolds\nConstraints: No unused imports, accessible markup, type-safe\nQuality Gates: lint clean, no console warnings\n\n[LOP]\nTask: Build a composable for network status with online/offline events and throttled state updates.\n","txt","",[82,83,84,92,98,104,110,116,123,129],"code",{"__ignoreMap":80},[85,86,89],"span",{"class":87,"line":88},"line",1,[85,90,91],{},"[HOP]\n",[85,93,95],{"class":87,"line":94},2,[85,96,97],{},"Role: Senior Vue/Nuxt Engineer AI\n",[85,99,101],{"class":87,"line":100},3,[85,102,103],{},"Goals: Generate concise component scaffolds\n",[85,105,107],{"class":87,"line":106},4,[85,108,109],{},"Constraints: No unused imports, accessible markup, type-safe\n",[85,111,113],{"class":87,"line":112},5,[85,114,115],{},"Quality Gates: lint clean, no console warnings\n",[85,117,119],{"class":87,"line":118},6,[85,120,122],{"emptyLinePlaceholder":121},true,"\n",[85,124,126],{"class":87,"line":125},7,[85,127,128],{},"[LOP]\n",[85,130,132],{"class":87,"line":131},8,[85,133,134],{},"Task: Build a composable for network status with online/offline events and throttled state updates.\n",[56,136,138],{"id":137},"code-doc-generator-mini-case","Code Doc Generator Mini-Case",[52,140,141],{},"A doc generator can parse components → emit prop/event tables. HOP defines tone + format; each file run is a LOP.",[56,143,145],{"id":144},"benefits","Benefits",[61,147,148,151,154],{},[64,149,150],{},"Repeatability",[64,152,153],{},"Easier diffing & debugging",[64,155,156],{},"Clear separation of stable vs volatile input",[56,158,160],{"id":159},"wrap-up","Wrap Up",[52,162,163],{},"Think of HOP as the contract and LOP as the request. Explicit boundaries reduce prompt drift and improve output consistency.",[165,166,167],"style",{},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":80,"searchDepth":94,"depth":94,"links":169},[170,171,172,173,174],{"id":58,"depth":94,"text":59},{"id":72,"depth":94,"text":73},{"id":137,"depth":94,"text":138},{"id":144,"depth":94,"text":145},{"id":159,"depth":94,"text":160},"2025-07-28","Use Higher Order Prompts (HOP) and Lower Order Prompts (LOP) to structure agent context for more predictable, high-signal outputs.","md","https://images.pexels.com/photos/3952234/pexels-photo-3952234.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",{},10,{"title":10,"description":176},"tipyuisp0bcZLBXrxU5rhjQlHYZBk5TNIAcmAgr9eqk",[184,185],null,{"title":14,"path":15,"stem":16,"description":186,"children":-1},"How to build rich active/previous/next card states in a carousel using pure CSS with Tailwind's arbitrary variants (group selectors, :has, sibling combinators)—no extra watchers.",1754966067141]